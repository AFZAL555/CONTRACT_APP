#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app=require('../app');
var debug=require('debug')('server:server');
var http=require('http');
const {Server}=require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port=normalizePort(process.env.PORT||'8080');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server=http.createServer(app);

//Socket.io
const io=new Server(server, ({
  cors: {
    origin: "http://localhost:5050",
    credentials: true,
  },
}));

let users=[];
const pushUser=(userId, socketId) =>
{
  !users.some((user) => user.userId===userId)&&users.push({userId, socketId});
};

const popUser=(socketId) =>
{

  users=users.filter((user) => user.socketId!==socketId);

};

const getReciver=(userId) =>
{
  return users.find(user => user.userId===userId);
};



io.on('connection', (socket) =>
{
  //When connection established with socket.io..
  console.log('A User Connected For Chat !');
  socket.on("addUser", (SenderId) =>
  {
    pushUser(SenderId, socket.id);
  });
  io.emit("getUsers", users);


  //Recive Messages.....
  socket.on("sendmessages", ({senderId, reciverId, text}) =>
  {
    const reciver=getReciver(reciverId);
    //send Messages 

    if(reciver) {
      io.to(reciver.socketId).emit("getmessages", {
        senderId,
        text,
      });
    }

  });



  //when Disconnect from Socket.io
  socket.on("disconnect", () =>
  {
    console.log("A User Disconnected From Chat !");
    popUser(socket.id);
  });
  io.emit("getUsers", users);

});


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {console.log("Server running on Port----> "+port);});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val)
{
  var port=parseInt(val, 10);

  if(isNaN(port)) {
    // named pipe
    return val;
  }

  if(port>=0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error)
{
  if(error.syscall!=='listen') {
    throw error;
  }

  var bind=typeof port==='string'
    ? 'Pipe '+port
    :'Port '+port;

  // handle specific listen errors with friendly messages
  switch(error.code) {
    case 'EACCES':
      console.error(bind+' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind+' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening ()
{
  var addr=server.address();
  var bind=typeof addr==='string'
    ? 'pipe '+addr
    :'port '+addr.port;
  debug('Listening on '+bind);
}
